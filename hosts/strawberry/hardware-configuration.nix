# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-amd"];
  boot.extraModulePackages = [];

  # fileSystems."/" =
  #   { device = "none";
  #     fsType = "tmpfs";
  #   };

  # fileSystems."/persist" =
  #   { device = "/dev/disk/by-uuid/4240c093-c2ba-4f9d-9350-5676805599fa";
  #     fsType = "btrfs";
  #     options = [ "subvol=@persist" ];
  #   };

  # boot.initrd.luks.devices."cryptroot".device = "/dev/disk/by-uuid/d369eb10-86ab-48bd-af55-10112c521243";

  # fileSystems."/nix" =
  #   { device = "/dev/disk/by-uuid/4240c093-c2ba-4f9d-9350-5676805599fa";
  #     fsType = "btrfs";
  #     options = [ "subvol=@nix" ];
  #   };

  # fileSystems."/var/lib/nixos" =
  #   { device = "/nix/@persist/var/lib/nixos";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/var/log" =
  #   { device = "/nix/@persist/var/log";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/etc/NetworkManager/system-connections" =
  #   { device = "/nix/@persist/etc/NetworkManager/system-connections";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/etc/nixos" =
  #   { device = "/nix/@persist/etc/nixos";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/.gnupg" =
  #   { device = "/nix/@persist/home/user/.gnupg";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/.local/share/keyrings" =
  #   { device = "/nix/@persist/home/user/.local/share/keyrings";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/.ssh" =
  #   { device = "/nix/@persist/home/user/.ssh";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/Desktop" =
  #   { device = "/nix/@persist/home/user/Desktop";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/Documents" =
  #   { device = "/nix/@persist/home/user/Documents";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/Music" =
  #   { device = "/nix/@persist/home/user/Music";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/Pictures" =
  #   { device = "/nix/@persist/home/user/Pictures";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/home/user/Videos" =
  #   { device = "/nix/@persist/home/user/Videos";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/var/lib/bluetooth" =
  #   { device = "/nix/@persist/var/lib/bluetooth";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/var/lib/systemd/coredump" =
  #   { device = "/nix/@persist/var/lib/systemd/coredump";
  #     fsType = "none";
  #     options = [ "bind" ];
  #   };

  # fileSystems."/boot" =
  #   { device = "/dev/disk/by-uuid/1419-7B96";
  #     fsType = "vfat";
  #   };

  swapDevices = [];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp11s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
